
service: nubble-app

custom:
  userPoolId: !Ref CognitoUserPool
  userPoolClientId: !Ref CognitoUserPoolClient
  userTableName: 'user-table-${self:service}-${self:provider.stage}'
  avatarBucket: '${self:service}-${self:provider.stage}-avatar-bucket-nubble'
  postTableName: 'post-table-${self:service}-${self:provider.stage}'
  postBucket: '${self:service}-${self:provider.stage}-post-bucket-nubble'
  apigwBinary:
    types:
      - 'multipart/form-data'

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region,'us-east-1'}
  environment:
    USER_POOL_ID: ${self:custom.userPoolId}
    USER_POOL_CLIENT_ID: ${self:custom.userPoolClientId}
    USER_TABLE: ${self:custom.userTableName}
    AVATAR_BUCKET: ${self:custom.avatarBucket}
    POST_BUCKET: ${self:custom.postBucket}
    POST_TABLE: ${self:custom.postTableName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - s3:*
          Resource:
            - "*"
  httpApi:
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
          - ''
          -
            - 'https://cognito-idp.'
            - ${self:provider.region}
            - '.amazonaws.com/'
            - Ref: CognitoUserPool
        audience:
          - Ref: CognitoUserPoolClient

plugins:
  - serverless-plugin-typescript
  - serverless-apigw-binary


functions:
  singUp:
    handler: src/functions/auth.singUp
    events: 
      - http:
          path: register
          method:  post
          cors: true
  confirmEmail:
    handler: src/functions/auth.confirmEmail
    events:
      - http:
          path: confirmEmail
          method: post
          cors: true
  forgotPassword:
    handler: src/functions/auth.forgotPassword
    events:
      - http:
          path: forgotPassword
          method: post
          cors: true
  confirmPassword:
    handler: src/functions/auth.confirmPassword
    events:
      - http:
          path: confirmPassword
          method: post
          cors: true
  login:
    handler: src/functions/auth.login
    events:
      - http:
          path: login
          method: post
          cors: true
  me:
    handler: src/functions/user.me
    events:
      - httpApi:
          path: /me
          method: get
          authorizer: serviceAuthorizer
  deleteAvatar:
    handler: src/functions/user.deleteAvatar
    events:
      - httpApi:
          path: /delete
          method: put
          authorizer: serviceAuthorizer
  updateUser:
    handler: src/functions/user.update
    events:
      - httpApi:
          path: /updateUser
          method: put
          authorizer: serviceAuthorizer
  post:
    handler: src/functions/post.post
    events:
      - httpApi:
          path: /post
          method: post
          authorizer: serviceAuthorizer
  toggoleLike:
    handler: src/functions/post.toggleLike
    events:
      - httpApi:
          path: /like/{postId}
          method: put
          authorizer: serviceAuthorizer
  comments:
    handler: src/functions/post.comments
    events:
      - httpApi:
          path: /comments/{postId}
          method: put
          authorizer: serviceAuthorizer
resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        AdminCreateUserConfig:
           AllowAdminCreateUserOnly: false
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        EmailVerificationMessage: 'Seu codigo de verificação para o cadastro NubbleApp é: {####}'
        EmailVerificationSubject: 'Codigo de verificação NubbleApp'
        Policies:
          PasswordPolicy:
              MinimumLength: 8
              RequireLowercase: true
              RequireNumbers: true
              RequireSymbols: true
              RequireUppercase: true
    CognitoUserPoolClient: 
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-user-pool-client
        UserPoolId: !Ref CognitoUserPool
        AllowedOAuthFlows:
         - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - email
          - openid
        CallbackURLs:
          - https://www.google.com
        LogoutURLs:
          - https://www.google.com
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        SupportedIdentityProviders: 
          - COGNITO
        ReadAttributes:
          - email
        WriteAttributes:
          - email
    AvatarBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.avatarBucket}
        AccessControl: Private
    AvatarBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AvatarBucket
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:DeleteObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref AvatarBucket
                  - /*
              Principal: '*'
    PostBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.postBucket}
        AccessControl: Private
    PostBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PostBucket
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:DeleteObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref PostBucket
                  - /*
              Principal: '*'